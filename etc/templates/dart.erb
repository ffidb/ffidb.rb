<% if header? %>
// <%= FFIDB.header %>

<% end %>
import 'dart:ffi';
import 'dart:io' as io;
<% for library in @libraries %>

final <%= library.name %> = DynamicLibrary.open('<%= dlopen_paths_for(library).first %>');
<% for enum in @enums[library] || [] %>

<% if enum.comment %>
/// <%= enum.comment %>
<% end %>
abstract class <%= enum.name %> {
  <%= enum.name %>._();

  <% for name, value in enum.values || {} %>
  static const <%= name %> = <%= value %>;
  <% end %>
}
<% end %>
<% for struct in @structs[library] || [] %>

<% if struct.comment %>
/// <%= struct.comment %>
<% end %>
class <%= struct.name %> extends Struct {
  <% for (name, type), i in (struct.fields || {}).each_with_index %>
<%= i.zero? ? '' : "\n" -%>
    <% unless type.pointer? %>
    @<%= ffi_struct_type(type) %>() // <%= type %>
    <% else %>
    // <%= type %>
    <% end %>
    <%= dart_struct_type(type) %> <%= name %>;
  <% end %>
}
<% end %>
<% for function in @functions[library] || [] %>

<% if function.comment %>
/// <%= function.comment %>
<% end %>
final <%= dart_param_type(function.type) %> Function(<%=
      function.parameters.each_value.map { |p| dart_param_type(p.type) }.join(', ')
    %>) <%= function.name %> = <%= library.name %>
    .lookup<NativeFunction<<%= ffi_param_type(function.type) %> Function(<%=
      function.parameters.each_value.map { |p| ffi_param_type(p.type) }.join(', ')
    %>)>>('<%= function.name %>')
    .asFunction();
<% end %>
<% end %>

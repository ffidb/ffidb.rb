<% if header? %>
# <%= FFIDB.header %>

<% end %>
require 'ffi'

module <%= @module %>
  extend FFI::Library
  ffi_lib [<%= @library_paths.map(&:inspect).join(', ') %>]
<% for enum in @enums || [] %>

  <% if enum.comment %>
  # <%= enum.comment %>
  <% end %>
  <%= enum.name %> = :int
  <% for name, value in enum.values || {} %>
  <%= name %> = <%= value %>
  <% end %>
<% end %>
<% for struct in @structs || [] %>

  <% if struct.comment %>
  # <%= struct.comment %>
  <% end %>
  class <%= struct.name %> < FFI::Struct
  <% for (name, type), i in (struct.fields || {}).each_with_index %>
    <%= i.zero? ? 'layout' : ' '*6 %> :<%= name %>, <%=
      case
        when type.array? then [format_type(type.array_type), type.array_size].inspect
        else format_type(type).inspect
      end
    %><%= (i == (struct.fields || {}).size-1) ? '' : ',' %>  # <%= type %>
  <% end %>
  end
<% end %>
<% for function in @functions || [] %>

  <% if function.comment %>
  # <%= function.comment %>
  <% end %>
  attach_function :<%= function.name %>, [<%=
    function.parameters.each_value.map { |p| format_type(p.type).inspect }.join(', ')
  %>], :<%= format_type(function.type) %>
<% end %>
end # <%= @module %>

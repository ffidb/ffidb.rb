#!/usr/bin/env ruby -W1
# This is free and unencumbered software released into the public domain.

require_relative '../lib/ffidb'

require 'thor' # https://rubygems.org/gems/thor

require 'pathname'
require 'yaml'

class CLI < Thor
  include FFIDB::Sysexits

  def self.exit_on_failure?() true end

  class_option :debug, aliases: '-d', type: :boolean, desc: "Enable debugging"
  class_option :verbose, aliases: '-v', type: :boolean, desc: "Be verbose (print warnings)"
  class_option :quiet, aliases: '-q', type: :boolean, desc: "Be quiet (silence non-fatal errors)"

  desc "export LIBRARY|SYMBOL...", "Generate C/C++/Go/Java/Python/Ruby/etc code"
  long_desc <<~EOS
    Generates code for a target language (e.g., C/C++/Java/Python/Ruby/etc).

    Currently supported target formats and programming languages:

      --format=c                     # C99
      --format=c++                   # C++11
      --format=dart                  # Dart & Flutter
      --format=go                    # Go (cgo)
      --format=java                  # Java (JNA)
      --format=json                  # JSON
      --format=lisp                  # Common Lisp (CFFI)
      --format=python                # Python (ctypes)
      --format=ruby                  # Ruby (FFI)
      --format=yaml                  # YAML

    For example:

      $ ffidb export lua -f=c        # Export Lua bindings as C code
      $ ffidb export lua -f=cpp      # Export Lua bindings as C++ code
      $ ffidb export lua -f=java     # Export Lua bindings as Java JNA code
      $ ffidb export lua -f=python   # Export Lua bindings as Python ctypes code
      $ ffidb export lua -f=ruby     # Export Lua bindings as Ruby FFI code
  EOS
  option :format, aliases: '-f', default: nil, desc: "Specify the output FORMAT (for example: java)"
  option :type, aliases: '-t', default: nil, desc: "Specify the symbol TYPE (enum/struct/function)"
  option :header, type: :boolean, default: true, desc: "Output the file header, or not"
  option :module, aliases: '-M', default: nil, desc: "Provide name for the top-level module or namespace"
  option :library_path, aliases: '-L', banner: 'DIRECTORY', desc: "Load all libraries from DIRECTORY"
  option :exclude, repeatable: true, banner: 'PATTERN', desc: "Exclude symbols matching the glob PATTERN"
  option :exclude_from, repeatable: true, banner: 'FILE', desc: "Read exclude patterns from FILE"
  option :disable, repeatable: true, banner: 'PATTERN', desc: "Disable symbols matching the glob PATTERN"
  option :disable_from, repeatable: true, banner: 'FILE', desc: "Read disable patterns from FILE"
  def export(pattern, *patterns)
    patterns.prepend(pattern)
    symbol_kind = self.options[:type] ? self.options[:type].to_sym : nil

    format = (self.options[:format] || 'yaml').to_sym

    excludes = []
    (self.options[:exclude] || []).each do |symbol|
      excludes += symbol.include?(',') ? symbol.split(',') : [symbol]
    end
    (self.options[:exclude_from] || []).map do |exclude_path|
      exclude_path = Pathname(exclude_path)
      raise Errno::ENOENT, exclude_path.to_s unless exclude_path.exist?
      exclude_path.each_line { |line| excludes << line.chomp }
    end
    excludes.sort!.uniq!
    excludes.map! do |exclude_pattern|
      FFIDB::Glob.new(exclude_pattern, ignore_case: false, match_substring: false)
    end

    disables = []
    (self.options[:disable] || []).each do |symbol|
      disables += symbol.include?(',') ? symbol.split(',') : [symbol]
    end
    (self.options[:disable_from] || []).map do |disable_path|
      disable_path = Pathname(disable_path)
      raise Errno::ENOENT, disable_path.to_s unless disable_path.exist?
      disable_path.each_line { |line| disables << line.chomp }
    end
    disables.sort!.uniq!
    disables.map! do |disable_pattern|
      FFIDB::Glob.new(disable_pattern, ignore_case: false, match_substring: false)
    end

    self.check_registry_exists!
    FFIDB::Registry.open do |registry|
      exports = []
      patterns.each do |pattern|
        if library = registry.open_library(pattern)
          library.each_symbol do |symbol|
            next if symbol_kind && symbol_kind != symbol.kind
            exports << [library, symbol.kind_weight, symbol] unless excludes.any? { |x| x === symbol.name }
          end
        else
          matcher = FFIDB::Glob.new(pattern, ignore_case: true, match_substring: false)
          registry.find_symbols(matcher) do |symbol, library|
            next if symbol_kind && symbol_kind != symbol.kind
            exports << [library, symbol.kind_weight, symbol] unless excludes.any? { |x| x === symbol.name }
          end
        end
      end

      FFIDB::Exporter.for(format).new(**options).emit do |export|
        prev_library = nil
        exports.sort!.uniq.each do |library, _, symbol|
          if library != prev_library
            export.finish_library if prev_library
            export.begin_library(library)
            prev_library = library
          end
          disabled = disables.any? { |pattern| pattern === symbol.name }
          export.export_symbol(symbol, disabled: disabled)
        end
        export.finish_library if prev_library
      end
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "init", "Initialize the registry (at: ~/.ffidb)"
  long_desc <<~EOS
    Initializes the local FFIDB registry, a prerequisite for using FFIDB.

    Your local FFIDB registry is located at $HOME/.ffidb (#{FFIDB::Registry.default_path}).

    This command is equivalent to:

      $ git clone --depth=1 #{FFIDB::Registry::GIT_HTTPS_URL} $HOME/.ffidb
  EOS
  def init
    registry_path = FFIDB::Registry.default_path
    if registry_path.exist?
      error = "The registry at #{registry_path} has already been initialized."
      warn "#{$0}: #{set_color(error, :yellow)}" if verbose?
      return
    end
    git_command = %Q(git clone --depth=1 #{FFIDB::Registry::GIT_HTTPS_URL} #{registry_path})
    system git_command # TODO: improve this
    if $?.exitstatus.nonzero?
      error = "Failed to execute `#{git_command}`: exit code #{$?.exitstatus}."
      warn "#{$0}: #{set_color(error, :red)}"
      exit $?.exitstatus
    end
    Dir.chdir registry_path
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "list [LIBRARY]", "List FFI libraries and symbols"
  long_desc <<~EOS
    Lists libraries with their FFI symbols (such as functions).

    For example:

      $ ffidb list lua
  EOS
  option :type, aliases: '-t', default: nil, desc: "Specify the symbol TYPE (enum/struct/function)"
  def list(library_name = nil)
    symbol_kind = self.options[:type] ? self.options[:type].to_sym : nil
    self.check_registry_exists!
    FFIDB::Registry.open do |registry|
      registry.each_library do |library|
        next if library_name && library_name != library.name
        p library if debug?
        library.each_symbol do |symbol|
          next if symbol_kind && symbol_kind != symbol.kind
          p symbol if debug?
          print "#{library.name}"
          print verbose? ? "@#{library.version}" : '' # TODO: resolve stable symlinks
          print "\t#{symbol.name}"
          if verbose?
            print "\t#{symbol.kind}"
            print "\t\t// #{symbol.definition.to_s}" if symbol.function?
          end
          puts
        end
      end
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "parse HEADER...", "Parse .h header files"
  long_desc <<~EOS
    Parses .h header files, outputting YAML using the FFIDB schema.

    Note: parsing requires installation of the 'ffi-clang' library:

      $ gem install ffi-clang
  EOS
  option :config, aliases: '-C', banner: 'FILE', desc: "Use a library.yaml configuration FILE"
  option :define, aliases: '-D', repeatable: true, banner: 'VAR[=VAL]', desc: "Define VAR as a preprocessor symbol"
  option :include, aliases: '-I', repeatable: true, banner: 'DIRECTORY', desc: "Add DIRECTORY to the headers search path"
  def parse(path, *paths)
    base_directory = nil
    paths.prepend(path)
    paths = paths.inject([]) do |paths, path|
      path = Pathname(path)
      case
        when !path.exist?
          raise "Path does not exist: #{path}"
        when path.directory?
          base_directory = path if base_directory.nil?
          paths.concat(Dir["#{path}/**/*.h"].sort.map { |p| Pathname(p) })
        else paths << path
      end
    end
    base_directory = paths.first.dirname if base_directory.nil?

    begin
      $VERBOSE = nil # suppress deprecation warnings from ffi-clang
      require 'ffi/clang' # https://rubygems.org/gems/ffi-clang
      $VERBOSE = false
    rescue LoadError => error
      raise error if debug?
      warn "#{$0}: #{set_color(error, :red)}"
      exit EX_UNAVAILABLE
    end

    FFIDB::Parser.new(base_directory: base_directory, debug: verbose? || debug?).tap do |parser|
      # Parse a library.yaml configuration file, if given:
      if config_path = self.options[:config]
        config_path = Pathname(config_path)
        raise Errno::ENOENT, config_path.to_s unless config_path.exist?
        config = YAML.load(config_path.read).transform_keys(&:to_sym)
        (config[:configure] || []).each do |var_and_val|
          parser.parse_macro! var_and_val
        end
        (config[:exclude] || []).each do |symbol|
          parser.exclude_symbols[symbol] = true
        end
        (config[:include] || []).each do |symbol|
          parser.include_symbols[symbol] = true
        end
      end

      # Parse and define all specified -D preprocessor symbols:
      (self.options[:define] || []).each do |var_and_val|
        parser.parse_macro! var_and_val
      end

      # Add all specified -I directories to the headers search path:
      (self.options[:include] || []).each do |dir_path|
        parser.add_include_path! Pathname(dir_path).expand_path
      end

      counter = 0
      paths.each do |path|
        header = parser.parse_header(path) do |exception|
          case exception
            when FFIDB::ParseError
              warn "#{$0}: #{set_color(exception.to_s, :red)}" unless quiet?
            when FFIDB::ParseWarning
              warn "#{$0}: #{set_color(exception.to_s, :yellow)}" if verbose?
            else raise exception
          end
        end
        header.functions.sort.each do |function|
          puts unless counter.zero?
          counter += 1
          p function if debug?
          puts '# ' + function.instance_variable_get(:@debug) if parser.debug
          puts function.to_yaml
        end
      end
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "search PATTERN", "Search for FFI symbols using a glob pattern"
  long_desc <<~EOS
    Searches for FFI symbols (for example, functions) using a glob pattern.

    For example:

      $ ffidb search sqlite3_*_blob
  EOS
  option :type, aliases: '-t', default: nil, desc: "Specify the symbol TYPE (enum/struct/function)"
  def search(pattern)
    symbol_kind = self.options[:type] ? self.options[:type].to_sym : nil
    matcher = FFIDB::Glob.new(pattern, ignore_case: true, match_substring: true)
    p self.options, matcher if debug?
    self.check_registry_exists!
    FFIDB::Registry.open do |registry|
      registry.find_symbols(matcher, kind: symbol_kind) do |symbol, library|
        puts "#{library.name}\t#{symbol.name}" # TODO: improve formatting
      end
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "show SYMBOL", "Show FFI symbol information"
  long_desc <<~EOS
    Shows information about an FFI symbol (for example, a function).

    For example:

      $ ffidb show lua_callk
  EOS
  option :type, aliases: '-t', default: nil, desc: "Specify the symbol TYPE (enum/struct/function)"
  def show(symbol_name)
    symbol_kind = self.options[:type] ? self.options[:type].to_sym : nil
    p self.options, symbol_name if debug?
    self.check_registry_exists!
    FFIDB::Registry.open do |registry|
      found = registry.find_symbols(symbol_name, kind: symbol_kind) do |symbol, library|
        puts symbol.to_yaml
        puts
      end
      raise FFIDB::SymbolNotFound.new(symbol_kind || :symbol, symbol_name) unless found
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  desc "update", "Fetch updates to the registry (at: ~/.ffidb)"
  long_desc <<~EOS
    Updates the local FFIDB registry, pulling updates from GitHub.

    Your local FFIDB registry is located at $HOME/.ffidb (#{FFIDB::Registry.default_path}).

    This command is equivalent to:

      $ cd $HOME/.ffidb && git pull
  EOS
  def update
    registry_path = self.check_registry_exists!
    Dir.chdir registry_path
    git_command = %Q(git pull)
    system git_command # TODO: improve this
    if $?.exitstatus.nonzero?
      error = "Failed to execute `#{git_command}` in #{registry_path}: exit code #{$?.exitstatus}."
      warn "#{$0}: #{set_color(error, :red)}"
      exit $?.exitstatus
    end
  rescue => error
    raise error if debug?
    warn "#{$0}: #{set_color(error, :red)}"
    exit error.respond_to?(:exit_code) ? error.exit_code : EX_SOFTWARE
  end

  private

  def check_registry_exists!
    registry_path = FFIDB::Registry.default_path
    raise FFIDB::RegistryError, "Registry at #{registry_path} not initialized (run `#{$0} init` first?)" unless registry_path.exist?
    registry_path
  end

  def debug?() self.options[:debug] end
  def verbose?() self.options[:verbose] || self.debug? end
  def quiet?() self.options[:quiet] end
end # CLI

# Fix for https://github.com/erikhuda/thor/issues/398
class Thor::Shell::Basic
  def print_wrapped(message, options = {})
    indent = (options[:indent] || 0).to_i
    if indent.zero?
      self.stdout.puts message
    else
      message.each_line do |message_line|
        self.stdout.print ' ' * indent
        self.stdout.puts message_line.chomp
      end
    end
  end
end # Thor::Shell::Basic

CLI.start(ARGV)

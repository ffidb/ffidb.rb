#!/usr/bin/env ruby -W0
# This is free and unencumbered software released into the public domain.

require_relative '../lib/ffidb'

require 'thor' # https://rubygems.org/gems/thor

require 'pathname'
require 'yaml'

class CLI < Thor
  def self.exit_on_failure?; true; end

  class_option :debug, aliases: '-d', type: :boolean, desc: "Enable debugging"
  class_option :verbose, aliases: '-v', type: :boolean, desc: "Be verbose"

  desc "export LIBRARY FUNCTION", "Export as Ruby code"
  option :format, aliases: '-f', default: nil, desc: "Specify the output format"
  def export(library, function)
    p library, function if self.options[:debug]
    warn "not implemented yet" # TODO
  end

  desc "list", "List libraries and functions"
  def list
    warn "not implemented yet" # TODO
  end

  desc "parse HEADER...", "Parse .h header files"
  option :define, aliases: '-D', repeatable: true, banner: 'VAR[=VAL]', desc: "Define a preprocessor symbol"
  def parse(*paths)
    base_directory = nil
    paths = paths.inject([]) do |paths, path|
      path = Pathname(path)
      case
        when !path.exist?
          abort "#{$0}: path does not exist: #{path}"
        when path.directory?
          base_directory = path if base_directory.nil?
          paths.concat(Dir["#{path}/**/*.h"].sort.map { |p| Pathname(p) })
        else paths << path
      end
    end
    base_directory = paths.first.dirname if base_directory.nil?

    begin
      require 'ffi/clang' # https://rubygems.org/gems/ffi-clang
    rescue LoadError => error
      p error if self.options[:debug]
      abort error.to_s
    end

    FFIDB::Parser.new(base_directory: base_directory).tap do |parser|
      # Parse and define any given preprocessor symbols:
      (self.options[:define] || []).each do |var_and_val|
        var, val = var_and_val.split('=', 2)
        val = 1 if val.nil?
        parser.define! var, val
      end

      paths.each_with_index do |path, counter|
        header = parser.parse_header(path)
        header.functions.sort.each do |function|
          puts unless counter.zero?
          p function if self.options[:debug]
          counter += 1
          puts "--- !function"
          yaml = {
            'name' => function.name,
            'result' => function.return_type,
          }
          yaml['parameters'] = function.parameters.inject({}) { |h, p| h.merge!(p.to_h) } if function.arity > 0
          yaml['comment'] = function.comment if function.comment && !function.comment.empty?
          yaml['definition'] = {
            'file' => function.definition&.file,
            'line' => function.definition&.line,
          }
          puts YAML.dump(yaml).gsub("---\n", '')
        end
      end
    end
  end

  desc "search KEYWORD", "Search using a keyword"
  def search(keyword)
    p keyword if self.options[:debug]
    warn "not implemented yet" # TODO
  end

  desc "show LIBRARY FUNCTION", "Show function information"
  def show(library, function)
    p library, function if self.options[:debug]
    warn "not implemented yet" # TODO
  end
end # CLI

CLI.start(ARGV)
